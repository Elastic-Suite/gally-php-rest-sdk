<?php
/**
 * CategoryConfiguration
 *
 * PHP version 5
 *
 * @category Class
 * @package  Gally\Rest
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Elasticsuite API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.29-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Gally\Rest\Model;

use \ArrayAccess;
use \Gally\Rest\ObjectSerializer;

/**
 * CategoryConfiguration Class Doc Comment
 *
 * @category Class
 * @package  Gally\Rest
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CategoryConfiguration implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CategoryConfiguration';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'category' => 'string',
        'catalog' => 'string',
        'localizedCatalog' => 'string',
        'name' => 'string',
        'isVirtual' => 'bool',
        'virtualRule' => 'string',
        'useNameInProductSearch' => 'bool',
        'defaultSorting' => 'string',
        'isActive' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'category' => 'iri-reference',
        'catalog' => 'iri-reference',
        'localizedCatalog' => 'iri-reference',
        'name' => null,
        'isVirtual' => null,
        'virtualRule' => null,
        'useNameInProductSearch' => null,
        'defaultSorting' => null,
        'isActive' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'category' => 'category',
        'catalog' => 'catalog',
        'localizedCatalog' => 'localizedCatalog',
        'name' => 'name',
        'isVirtual' => 'isVirtual',
        'virtualRule' => 'virtualRule',
        'useNameInProductSearch' => 'useNameInProductSearch',
        'defaultSorting' => 'defaultSorting',
        'isActive' => 'isActive'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'category' => 'setCategory',
        'catalog' => 'setCatalog',
        'localizedCatalog' => 'setLocalizedCatalog',
        'name' => 'setName',
        'isVirtual' => 'setIsVirtual',
        'virtualRule' => 'setVirtualRule',
        'useNameInProductSearch' => 'setUseNameInProductSearch',
        'defaultSorting' => 'setDefaultSorting',
        'isActive' => 'setIsActive'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'category' => 'getCategory',
        'catalog' => 'getCatalog',
        'localizedCatalog' => 'getLocalizedCatalog',
        'name' => 'getName',
        'isVirtual' => 'getIsVirtual',
        'virtualRule' => 'getVirtualRule',
        'useNameInProductSearch' => 'getUseNameInProductSearch',
        'defaultSorting' => 'getDefaultSorting',
        'isActive' => 'getIsActive'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['category'] = isset($data['category']) ? $data['category'] : null;
        $this->container['catalog'] = isset($data['catalog']) ? $data['catalog'] : null;
        $this->container['localizedCatalog'] = isset($data['localizedCatalog']) ? $data['localizedCatalog'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['isVirtual'] = isset($data['isVirtual']) ? $data['isVirtual'] : null;
        $this->container['virtualRule'] = isset($data['virtualRule']) ? $data['virtualRule'] : null;
        $this->container['useNameInProductSearch'] = isset($data['useNameInProductSearch']) ? $data['useNameInProductSearch'] : null;
        $this->container['defaultSorting'] = isset($data['defaultSorting']) ? $data['defaultSorting'] : null;
        $this->container['isActive'] = isset($data['isActive']) ? $data['isActive'] : true;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets category
     *
     * @return string
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param string $category category
     *
     * @return $this
     */
    public function setCategory($category)
    {
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets catalog
     *
     * @return string
     */
    public function getCatalog()
    {
        return $this->container['catalog'];
    }

    /**
     * Sets catalog
     *
     * @param string $catalog catalog
     *
     * @return $this
     */
    public function setCatalog($catalog)
    {
        $this->container['catalog'] = $catalog;

        return $this;
    }

    /**
     * Gets localizedCatalog
     *
     * @return string
     */
    public function getLocalizedCatalog()
    {
        return $this->container['localizedCatalog'];
    }

    /**
     * Sets localizedCatalog
     *
     * @param string $localizedCatalog localizedCatalog
     *
     * @return $this
     */
    public function setLocalizedCatalog($localizedCatalog)
    {
        $this->container['localizedCatalog'] = $localizedCatalog;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets isVirtual
     *
     * @return bool
     */
    public function getIsVirtual()
    {
        return $this->container['isVirtual'];
    }

    /**
     * Sets isVirtual
     *
     * @param bool $isVirtual isVirtual
     *
     * @return $this
     */
    public function setIsVirtual($isVirtual)
    {
        $this->container['isVirtual'] = $isVirtual;

        return $this;
    }

    /**
     * Gets virtualRule
     *
     * @return string
     */
    public function getVirtualRule()
    {
        return $this->container['virtualRule'];
    }

    /**
     * Sets virtualRule
     *
     * @param string $virtualRule virtualRule
     *
     * @return $this
     */
    public function setVirtualRule($virtualRule)
    {
        $this->container['virtualRule'] = $virtualRule;

        return $this;
    }

    /**
     * Gets useNameInProductSearch
     *
     * @return bool
     */
    public function getUseNameInProductSearch()
    {
        return $this->container['useNameInProductSearch'];
    }

    /**
     * Sets useNameInProductSearch
     *
     * @param bool $useNameInProductSearch useNameInProductSearch
     *
     * @return $this
     */
    public function setUseNameInProductSearch($useNameInProductSearch)
    {
        $this->container['useNameInProductSearch'] = $useNameInProductSearch;

        return $this;
    }

    /**
     * Gets defaultSorting
     *
     * @return string
     */
    public function getDefaultSorting()
    {
        return $this->container['defaultSorting'];
    }

    /**
     * Sets defaultSorting
     *
     * @param string $defaultSorting defaultSorting
     *
     * @return $this
     */
    public function setDefaultSorting($defaultSorting)
    {
        $this->container['defaultSorting'] = $defaultSorting;

        return $this;
    }

    /**
     * Gets isActive
     *
     * @return bool
     */
    public function getIsActive()
    {
        return $this->container['isActive'];
    }

    /**
     * Sets isActive
     *
     * @param bool $isActive isActive
     *
     * @return $this
     */
    public function setIsActive($isActive)
    {
        $this->container['isActive'] = $isActive;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


