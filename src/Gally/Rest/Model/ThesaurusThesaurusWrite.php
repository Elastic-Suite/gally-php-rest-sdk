<?php
/**
 * ThesaurusThesaurusWrite
 *
 * PHP version 5
 *
 * @category Class
 * @package  Gally\Rest
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Gally API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.30
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Gally\Rest\Model;

use \ArrayAccess;
use \Gally\Rest\ObjectSerializer;

/**
 * ThesaurusThesaurusWrite Class Doc Comment
 *
 * @category Class
 * @package  Gally\Rest
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ThesaurusThesaurusWrite implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Thesaurus-thesaurus.write';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'name' => 'string',
        'isActive' => 'bool',
        'type' => 'string',
        'scopeType' => 'string',
        'localizedCatalogs' => 'string[]',
        'locales' => '\Gally\Rest\Model\ThesaurusLocaleThesaurusWrite[]',
        'synonyms' => '\Gally\Rest\Model\ThesaurusSynonymThesaurusWrite[]',
        'expansions' => '\Gally\Rest\Model\ThesaurusExpansionThesaurusWrite[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'name' => null,
        'isActive' => null,
        'type' => null,
        'scopeType' => null,
        'localizedCatalogs' => 'iri-reference',
        'locales' => null,
        'synonyms' => null,
        'expansions' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'isActive' => 'isActive',
        'type' => 'type',
        'scopeType' => 'scopeType',
        'localizedCatalogs' => 'localizedCatalogs',
        'locales' => 'locales',
        'synonyms' => 'synonyms',
        'expansions' => 'expansions'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'isActive' => 'setIsActive',
        'type' => 'setType',
        'scopeType' => 'setScopeType',
        'localizedCatalogs' => 'setLocalizedCatalogs',
        'locales' => 'setLocales',
        'synonyms' => 'setSynonyms',
        'expansions' => 'setExpansions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'isActive' => 'getIsActive',
        'type' => 'getType',
        'scopeType' => 'getScopeType',
        'localizedCatalogs' => 'getLocalizedCatalogs',
        'locales' => 'getLocales',
        'synonyms' => 'getSynonyms',
        'expansions' => 'getExpansions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['isActive'] = isset($data['isActive']) ? $data['isActive'] : true;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['scopeType'] = isset($data['scopeType']) ? $data['scopeType'] : null;
        $this->container['localizedCatalogs'] = isset($data['localizedCatalogs']) ? $data['localizedCatalogs'] : null;
        $this->container['locales'] = isset($data['locales']) ? $data['locales'] : null;
        $this->container['synonyms'] = isset($data['synonyms']) ? $data['synonyms'] : null;
        $this->container['expansions'] = isset($data['expansions']) ? $data['expansions'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['isActive'] === null) {
            $invalidProperties[] = "'isActive' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        if ($this->container['scopeType'] === null) {
            $invalidProperties[] = "'scopeType' can't be null";
        }
        if ($this->container['localizedCatalogs'] === null) {
            $invalidProperties[] = "'localizedCatalogs' can't be null";
        }
        if ($this->container['locales'] === null) {
            $invalidProperties[] = "'locales' can't be null";
        }
        if ($this->container['synonyms'] === null) {
            $invalidProperties[] = "'synonyms' can't be null";
        }
        if ($this->container['expansions'] === null) {
            $invalidProperties[] = "'expansions' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets isActive
     *
     * @return bool
     */
    public function getIsActive()
    {
        return $this->container['isActive'];
    }

    /**
     * Sets isActive
     *
     * @param bool $isActive isActive
     *
     * @return $this
     */
    public function setIsActive($isActive)
    {
        $this->container['isActive'] = $isActive;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets scopeType
     *
     * @return string
     */
    public function getScopeType()
    {
        return $this->container['scopeType'];
    }

    /**
     * Sets scopeType
     *
     * @param string $scopeType scopeType
     *
     * @return $this
     */
    public function setScopeType($scopeType)
    {
        $this->container['scopeType'] = $scopeType;

        return $this;
    }

    /**
     * Gets localizedCatalogs
     *
     * @return string[]
     */
    public function getLocalizedCatalogs()
    {
        return $this->container['localizedCatalogs'];
    }

    /**
     * Sets localizedCatalogs
     *
     * @param string[] $localizedCatalogs localizedCatalogs
     *
     * @return $this
     */
    public function setLocalizedCatalogs($localizedCatalogs)
    {
        $this->container['localizedCatalogs'] = $localizedCatalogs;

        return $this;
    }

    /**
     * Gets locales
     *
     * @return \Gally\Rest\Model\ThesaurusLocaleThesaurusWrite[]
     */
    public function getLocales()
    {
        return $this->container['locales'];
    }

    /**
     * Sets locales
     *
     * @param \Gally\Rest\Model\ThesaurusLocaleThesaurusWrite[] $locales locales
     *
     * @return $this
     */
    public function setLocales($locales)
    {
        $this->container['locales'] = $locales;

        return $this;
    }

    /**
     * Gets synonyms
     *
     * @return \Gally\Rest\Model\ThesaurusSynonymThesaurusWrite[]
     */
    public function getSynonyms()
    {
        return $this->container['synonyms'];
    }

    /**
     * Sets synonyms
     *
     * @param \Gally\Rest\Model\ThesaurusSynonymThesaurusWrite[] $synonyms synonyms
     *
     * @return $this
     */
    public function setSynonyms($synonyms)
    {
        $this->container['synonyms'] = $synonyms;

        return $this;
    }

    /**
     * Gets expansions
     *
     * @return \Gally\Rest\Model\ThesaurusExpansionThesaurusWrite[]
     */
    public function getExpansions()
    {
        return $this->container['expansions'];
    }

    /**
     * Sets expansions
     *
     * @param \Gally\Rest\Model\ThesaurusExpansionThesaurusWrite[] $expansions expansions
     *
     * @return $this
     */
    public function setExpansions($expansions)
    {
        $this->container['expansions'] = $expansions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


