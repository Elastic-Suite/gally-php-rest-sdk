<?php
/**
 * FacetConfigurationApi
 * PHP version 5
 *
 * @category Class
 * @package  Gally\Rest
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Gally API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.29-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Gally\Rest\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Gally\Rest\ApiException;
use Gally\Rest\Configuration;
use Gally\Rest\HeaderSelector;
use Gally\Rest\ObjectSerializer;

/**
 * FacetConfigurationApi Class Doc Comment
 *
 * @category Class
 * @package  Gally\Rest
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FacetConfigurationApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation deleteFacetConfigurationItem
     *
     * Removes the FacetConfiguration resource.
     *
     * @param  string $id id (required)
     *
     * @throws \Gally\Rest\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteFacetConfigurationItem($id)
    {
        $this->deleteFacetConfigurationItemWithHttpInfo($id);
    }

    /**
     * Operation deleteFacetConfigurationItemWithHttpInfo
     *
     * Removes the FacetConfiguration resource.
     *
     * @param  string $id (required)
     *
     * @throws \Gally\Rest\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteFacetConfigurationItemWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->deleteFacetConfigurationItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteFacetConfigurationItemAsync
     *
     * Removes the FacetConfiguration resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteFacetConfigurationItemAsync($id)
    {
        return $this->deleteFacetConfigurationItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteFacetConfigurationItemAsyncWithHttpInfo
     *
     * Removes the FacetConfiguration resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteFacetConfigurationItemAsyncWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->deleteFacetConfigurationItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteFacetConfigurationItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteFacetConfigurationItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteFacetConfigurationItem'
            );
        }

        $resourcePath = '/facet_configurations/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getFacetConfigurationCollection
     *
     * Retrieves the collection of FacetConfiguration resources.
     *
     * @param  string $search search (optional)
     * @param  string $sourceFieldMetadataEntity sourceFieldMetadataEntity (optional)
     * @param  string[] $sourceFieldMetadataEntity2 sourceFieldMetadataEntity2 (optional)
     * @param  string $category category (optional)
     * @param  string[] $category2 category2 (optional)
     * @param  string $displayMode displayMode (optional)
     * @param  string[] $displayMode2 displayMode2 (optional)
     * @param  string $sortOrder sortOrder (optional)
     * @param  string[] $sortOrder2 sortOrder2 (optional)
     * @param  string $coverageRateBetween coverageRateBetween (optional)
     * @param  string $coverageRateGt coverageRateGt (optional)
     * @param  string $coverageRateGte coverageRateGte (optional)
     * @param  string $coverageRateLt coverageRateLt (optional)
     * @param  string $coverageRateLte coverageRateLte (optional)
     * @param  string $maxSizeBetween maxSizeBetween (optional)
     * @param  string $maxSizeGt maxSizeGt (optional)
     * @param  string $maxSizeGte maxSizeGte (optional)
     * @param  string $maxSizeLt maxSizeLt (optional)
     * @param  string $maxSizeLte maxSizeLte (optional)
     * @param  int $currentPage The collection page number (optional)
     * @param  int $pageSize The number of items per page (optional)
     * @param  bool $pagination Enable or disable pagination (optional)
     *
     * @throws \Gally\Rest\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Gally\Rest\Model\FacetConfigurationFacetConfigurationRead[]
     */
    public function getFacetConfigurationCollection($search = null, $sourceFieldMetadataEntity = null, $sourceFieldMetadataEntity2 = null, $category = null, $category2 = null, $displayMode = null, $displayMode2 = null, $sortOrder = null, $sortOrder2 = null, $coverageRateBetween = null, $coverageRateGt = null, $coverageRateGte = null, $coverageRateLt = null, $coverageRateLte = null, $maxSizeBetween = null, $maxSizeGt = null, $maxSizeGte = null, $maxSizeLt = null, $maxSizeLte = null, $currentPage = null, $pageSize = null, $pagination = null)
    {
        list($response) = $this->getFacetConfigurationCollectionWithHttpInfo($search, $sourceFieldMetadataEntity, $sourceFieldMetadataEntity2, $category, $category2, $displayMode, $displayMode2, $sortOrder, $sortOrder2, $coverageRateBetween, $coverageRateGt, $coverageRateGte, $coverageRateLt, $coverageRateLte, $maxSizeBetween, $maxSizeGt, $maxSizeGte, $maxSizeLt, $maxSizeLte, $currentPage, $pageSize, $pagination);
        return $response;
    }

    /**
     * Operation getFacetConfigurationCollectionWithHttpInfo
     *
     * Retrieves the collection of FacetConfiguration resources.
     *
     * @param  string $search (optional)
     * @param  string $sourceFieldMetadataEntity (optional)
     * @param  string[] $sourceFieldMetadataEntity2 (optional)
     * @param  string $category (optional)
     * @param  string[] $category2 (optional)
     * @param  string $displayMode (optional)
     * @param  string[] $displayMode2 (optional)
     * @param  string $sortOrder (optional)
     * @param  string[] $sortOrder2 (optional)
     * @param  string $coverageRateBetween (optional)
     * @param  string $coverageRateGt (optional)
     * @param  string $coverageRateGte (optional)
     * @param  string $coverageRateLt (optional)
     * @param  string $coverageRateLte (optional)
     * @param  string $maxSizeBetween (optional)
     * @param  string $maxSizeGt (optional)
     * @param  string $maxSizeGte (optional)
     * @param  string $maxSizeLt (optional)
     * @param  string $maxSizeLte (optional)
     * @param  int $currentPage The collection page number (optional)
     * @param  int $pageSize The number of items per page (optional)
     * @param  bool $pagination Enable or disable pagination (optional)
     *
     * @throws \Gally\Rest\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Gally\Rest\Model\FacetConfigurationFacetConfigurationRead[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getFacetConfigurationCollectionWithHttpInfo($search = null, $sourceFieldMetadataEntity = null, $sourceFieldMetadataEntity2 = null, $category = null, $category2 = null, $displayMode = null, $displayMode2 = null, $sortOrder = null, $sortOrder2 = null, $coverageRateBetween = null, $coverageRateGt = null, $coverageRateGte = null, $coverageRateLt = null, $coverageRateLte = null, $maxSizeBetween = null, $maxSizeGt = null, $maxSizeGte = null, $maxSizeLt = null, $maxSizeLte = null, $currentPage = null, $pageSize = null, $pagination = null)
    {
        $returnType = '\Gally\Rest\Model\FacetConfigurationFacetConfigurationRead[]';
        $request = $this->getFacetConfigurationCollectionRequest($search, $sourceFieldMetadataEntity, $sourceFieldMetadataEntity2, $category, $category2, $displayMode, $displayMode2, $sortOrder, $sortOrder2, $coverageRateBetween, $coverageRateGt, $coverageRateGte, $coverageRateLt, $coverageRateLte, $maxSizeBetween, $maxSizeGt, $maxSizeGte, $maxSizeLt, $maxSizeLte, $currentPage, $pageSize, $pagination);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Gally\Rest\Model\FacetConfigurationFacetConfigurationRead[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getFacetConfigurationCollectionAsync
     *
     * Retrieves the collection of FacetConfiguration resources.
     *
     * @param  string $search (optional)
     * @param  string $sourceFieldMetadataEntity (optional)
     * @param  string[] $sourceFieldMetadataEntity2 (optional)
     * @param  string $category (optional)
     * @param  string[] $category2 (optional)
     * @param  string $displayMode (optional)
     * @param  string[] $displayMode2 (optional)
     * @param  string $sortOrder (optional)
     * @param  string[] $sortOrder2 (optional)
     * @param  string $coverageRateBetween (optional)
     * @param  string $coverageRateGt (optional)
     * @param  string $coverageRateGte (optional)
     * @param  string $coverageRateLt (optional)
     * @param  string $coverageRateLte (optional)
     * @param  string $maxSizeBetween (optional)
     * @param  string $maxSizeGt (optional)
     * @param  string $maxSizeGte (optional)
     * @param  string $maxSizeLt (optional)
     * @param  string $maxSizeLte (optional)
     * @param  int $currentPage The collection page number (optional)
     * @param  int $pageSize The number of items per page (optional)
     * @param  bool $pagination Enable or disable pagination (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFacetConfigurationCollectionAsync($search = null, $sourceFieldMetadataEntity = null, $sourceFieldMetadataEntity2 = null, $category = null, $category2 = null, $displayMode = null, $displayMode2 = null, $sortOrder = null, $sortOrder2 = null, $coverageRateBetween = null, $coverageRateGt = null, $coverageRateGte = null, $coverageRateLt = null, $coverageRateLte = null, $maxSizeBetween = null, $maxSizeGt = null, $maxSizeGte = null, $maxSizeLt = null, $maxSizeLte = null, $currentPage = null, $pageSize = null, $pagination = null)
    {
        return $this->getFacetConfigurationCollectionAsyncWithHttpInfo($search, $sourceFieldMetadataEntity, $sourceFieldMetadataEntity2, $category, $category2, $displayMode, $displayMode2, $sortOrder, $sortOrder2, $coverageRateBetween, $coverageRateGt, $coverageRateGte, $coverageRateLt, $coverageRateLte, $maxSizeBetween, $maxSizeGt, $maxSizeGte, $maxSizeLt, $maxSizeLte, $currentPage, $pageSize, $pagination)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getFacetConfigurationCollectionAsyncWithHttpInfo
     *
     * Retrieves the collection of FacetConfiguration resources.
     *
     * @param  string $search (optional)
     * @param  string $sourceFieldMetadataEntity (optional)
     * @param  string[] $sourceFieldMetadataEntity2 (optional)
     * @param  string $category (optional)
     * @param  string[] $category2 (optional)
     * @param  string $displayMode (optional)
     * @param  string[] $displayMode2 (optional)
     * @param  string $sortOrder (optional)
     * @param  string[] $sortOrder2 (optional)
     * @param  string $coverageRateBetween (optional)
     * @param  string $coverageRateGt (optional)
     * @param  string $coverageRateGte (optional)
     * @param  string $coverageRateLt (optional)
     * @param  string $coverageRateLte (optional)
     * @param  string $maxSizeBetween (optional)
     * @param  string $maxSizeGt (optional)
     * @param  string $maxSizeGte (optional)
     * @param  string $maxSizeLt (optional)
     * @param  string $maxSizeLte (optional)
     * @param  int $currentPage The collection page number (optional)
     * @param  int $pageSize The number of items per page (optional)
     * @param  bool $pagination Enable or disable pagination (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFacetConfigurationCollectionAsyncWithHttpInfo($search = null, $sourceFieldMetadataEntity = null, $sourceFieldMetadataEntity2 = null, $category = null, $category2 = null, $displayMode = null, $displayMode2 = null, $sortOrder = null, $sortOrder2 = null, $coverageRateBetween = null, $coverageRateGt = null, $coverageRateGte = null, $coverageRateLt = null, $coverageRateLte = null, $maxSizeBetween = null, $maxSizeGt = null, $maxSizeGte = null, $maxSizeLt = null, $maxSizeLte = null, $currentPage = null, $pageSize = null, $pagination = null)
    {
        $returnType = '\Gally\Rest\Model\FacetConfigurationFacetConfigurationRead[]';
        $request = $this->getFacetConfigurationCollectionRequest($search, $sourceFieldMetadataEntity, $sourceFieldMetadataEntity2, $category, $category2, $displayMode, $displayMode2, $sortOrder, $sortOrder2, $coverageRateBetween, $coverageRateGt, $coverageRateGte, $coverageRateLt, $coverageRateLte, $maxSizeBetween, $maxSizeGt, $maxSizeGte, $maxSizeLt, $maxSizeLte, $currentPage, $pageSize, $pagination);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getFacetConfigurationCollection'
     *
     * @param  string $search (optional)
     * @param  string $sourceFieldMetadataEntity (optional)
     * @param  string[] $sourceFieldMetadataEntity2 (optional)
     * @param  string $category (optional)
     * @param  string[] $category2 (optional)
     * @param  string $displayMode (optional)
     * @param  string[] $displayMode2 (optional)
     * @param  string $sortOrder (optional)
     * @param  string[] $sortOrder2 (optional)
     * @param  string $coverageRateBetween (optional)
     * @param  string $coverageRateGt (optional)
     * @param  string $coverageRateGte (optional)
     * @param  string $coverageRateLt (optional)
     * @param  string $coverageRateLte (optional)
     * @param  string $maxSizeBetween (optional)
     * @param  string $maxSizeGt (optional)
     * @param  string $maxSizeGte (optional)
     * @param  string $maxSizeLt (optional)
     * @param  string $maxSizeLte (optional)
     * @param  int $currentPage The collection page number (optional)
     * @param  int $pageSize The number of items per page (optional)
     * @param  bool $pagination Enable or disable pagination (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getFacetConfigurationCollectionRequest($search = null, $sourceFieldMetadataEntity = null, $sourceFieldMetadataEntity2 = null, $category = null, $category2 = null, $displayMode = null, $displayMode2 = null, $sortOrder = null, $sortOrder2 = null, $coverageRateBetween = null, $coverageRateGt = null, $coverageRateGte = null, $coverageRateLt = null, $coverageRateLte = null, $maxSizeBetween = null, $maxSizeGt = null, $maxSizeGte = null, $maxSizeLt = null, $maxSizeLte = null, $currentPage = null, $pageSize = null, $pagination = null)
    {

        $resourcePath = '/facet_configurations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($search !== null) {
            $queryParams['search'] = ObjectSerializer::toQueryValue($search);
        }
        // query params
        if ($sourceFieldMetadataEntity !== null) {
            $queryParams['sourceField.metadata.entity'] = ObjectSerializer::toQueryValue($sourceFieldMetadataEntity);
        }
        // query params
        if (is_array($sourceFieldMetadataEntity2)) {
            $queryParams['sourceField.metadata.entity[]'] = $sourceFieldMetadataEntity2;
        } else
        if ($sourceFieldMetadataEntity2 !== null) {
            $queryParams['sourceField.metadata.entity[]'] = ObjectSerializer::toQueryValue($sourceFieldMetadataEntity2);
        }
        // query params
        if ($category !== null) {
            $queryParams['category'] = ObjectSerializer::toQueryValue($category);
        }
        // query params
        if (is_array($category2)) {
            $queryParams['category[]'] = $category2;
        } else
        if ($category2 !== null) {
            $queryParams['category[]'] = ObjectSerializer::toQueryValue($category2);
        }
        // query params
        if ($displayMode !== null) {
            $queryParams['displayMode'] = ObjectSerializer::toQueryValue($displayMode);
        }
        // query params
        if (is_array($displayMode2)) {
            $queryParams['displayMode[]'] = $displayMode2;
        } else
        if ($displayMode2 !== null) {
            $queryParams['displayMode[]'] = ObjectSerializer::toQueryValue($displayMode2);
        }
        // query params
        if ($sortOrder !== null) {
            $queryParams['sortOrder'] = ObjectSerializer::toQueryValue($sortOrder);
        }
        // query params
        if (is_array($sortOrder2)) {
            $queryParams['sortOrder[]'] = $sortOrder2;
        } else
        if ($sortOrder2 !== null) {
            $queryParams['sortOrder[]'] = ObjectSerializer::toQueryValue($sortOrder2);
        }
        // query params
        if ($coverageRateBetween !== null) {
            $queryParams['coverageRate[between]'] = ObjectSerializer::toQueryValue($coverageRateBetween);
        }
        // query params
        if ($coverageRateGt !== null) {
            $queryParams['coverageRate[gt]'] = ObjectSerializer::toQueryValue($coverageRateGt);
        }
        // query params
        if ($coverageRateGte !== null) {
            $queryParams['coverageRate[gte]'] = ObjectSerializer::toQueryValue($coverageRateGte);
        }
        // query params
        if ($coverageRateLt !== null) {
            $queryParams['coverageRate[lt]'] = ObjectSerializer::toQueryValue($coverageRateLt);
        }
        // query params
        if ($coverageRateLte !== null) {
            $queryParams['coverageRate[lte]'] = ObjectSerializer::toQueryValue($coverageRateLte);
        }
        // query params
        if ($maxSizeBetween !== null) {
            $queryParams['maxSize[between]'] = ObjectSerializer::toQueryValue($maxSizeBetween);
        }
        // query params
        if ($maxSizeGt !== null) {
            $queryParams['maxSize[gt]'] = ObjectSerializer::toQueryValue($maxSizeGt);
        }
        // query params
        if ($maxSizeGte !== null) {
            $queryParams['maxSize[gte]'] = ObjectSerializer::toQueryValue($maxSizeGte);
        }
        // query params
        if ($maxSizeLt !== null) {
            $queryParams['maxSize[lt]'] = ObjectSerializer::toQueryValue($maxSizeLt);
        }
        // query params
        if ($maxSizeLte !== null) {
            $queryParams['maxSize[lte]'] = ObjectSerializer::toQueryValue($maxSizeLte);
        }
        // query params
        if ($currentPage !== null) {
            $queryParams['currentPage'] = ObjectSerializer::toQueryValue($currentPage);
        }
        // query params
        if ($pageSize !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($pageSize);
        }
        // query params
        if ($pagination !== null) {
            $queryParams['pagination'] = ObjectSerializer::toQueryValue($pagination);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getFacetConfigurationItem
     *
     * Retrieves a FacetConfiguration resource.
     *
     * @param  string $id id (required)
     *
     * @throws \Gally\Rest\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Gally\Rest\Model\FacetConfigurationFacetConfigurationRead
     */
    public function getFacetConfigurationItem($id)
    {
        list($response) = $this->getFacetConfigurationItemWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getFacetConfigurationItemWithHttpInfo
     *
     * Retrieves a FacetConfiguration resource.
     *
     * @param  string $id (required)
     *
     * @throws \Gally\Rest\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Gally\Rest\Model\FacetConfigurationFacetConfigurationRead, HTTP status code, HTTP response headers (array of strings)
     */
    public function getFacetConfigurationItemWithHttpInfo($id)
    {
        $returnType = '\Gally\Rest\Model\FacetConfigurationFacetConfigurationRead';
        $request = $this->getFacetConfigurationItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Gally\Rest\Model\FacetConfigurationFacetConfigurationRead',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getFacetConfigurationItemAsync
     *
     * Retrieves a FacetConfiguration resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFacetConfigurationItemAsync($id)
    {
        return $this->getFacetConfigurationItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getFacetConfigurationItemAsyncWithHttpInfo
     *
     * Retrieves a FacetConfiguration resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFacetConfigurationItemAsyncWithHttpInfo($id)
    {
        $returnType = '\Gally\Rest\Model\FacetConfigurationFacetConfigurationRead';
        $request = $this->getFacetConfigurationItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getFacetConfigurationItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getFacetConfigurationItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getFacetConfigurationItem'
            );
        }

        $resourcePath = '/facet_configurations/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation patchFacetConfigurationItem
     *
     * Updates the FacetConfiguration resource.
     *
     * @param  string $id id (required)
     * @param  \Gally\Rest\Model\FacetConfigurationFacetConfigurationWrite $facetConfiguration The updated FacetConfiguration resource (optional)
     *
     * @throws \Gally\Rest\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Gally\Rest\Model\FacetConfigurationFacetConfigurationRead
     */
    public function patchFacetConfigurationItem($id, $facetConfiguration = null)
    {
        list($response) = $this->patchFacetConfigurationItemWithHttpInfo($id, $facetConfiguration);
        return $response;
    }

    /**
     * Operation patchFacetConfigurationItemWithHttpInfo
     *
     * Updates the FacetConfiguration resource.
     *
     * @param  string $id (required)
     * @param  \Gally\Rest\Model\FacetConfigurationFacetConfigurationWrite $facetConfiguration The updated FacetConfiguration resource (optional)
     *
     * @throws \Gally\Rest\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Gally\Rest\Model\FacetConfigurationFacetConfigurationRead, HTTP status code, HTTP response headers (array of strings)
     */
    public function patchFacetConfigurationItemWithHttpInfo($id, $facetConfiguration = null)
    {
        $returnType = '\Gally\Rest\Model\FacetConfigurationFacetConfigurationRead';
        $request = $this->patchFacetConfigurationItemRequest($id, $facetConfiguration);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Gally\Rest\Model\FacetConfigurationFacetConfigurationRead',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation patchFacetConfigurationItemAsync
     *
     * Updates the FacetConfiguration resource.
     *
     * @param  string $id (required)
     * @param  \Gally\Rest\Model\FacetConfigurationFacetConfigurationWrite $facetConfiguration The updated FacetConfiguration resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchFacetConfigurationItemAsync($id, $facetConfiguration = null)
    {
        return $this->patchFacetConfigurationItemAsyncWithHttpInfo($id, $facetConfiguration)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation patchFacetConfigurationItemAsyncWithHttpInfo
     *
     * Updates the FacetConfiguration resource.
     *
     * @param  string $id (required)
     * @param  \Gally\Rest\Model\FacetConfigurationFacetConfigurationWrite $facetConfiguration The updated FacetConfiguration resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchFacetConfigurationItemAsyncWithHttpInfo($id, $facetConfiguration = null)
    {
        $returnType = '\Gally\Rest\Model\FacetConfigurationFacetConfigurationRead';
        $request = $this->patchFacetConfigurationItemRequest($id, $facetConfiguration);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'patchFacetConfigurationItem'
     *
     * @param  string $id (required)
     * @param  \Gally\Rest\Model\FacetConfigurationFacetConfigurationWrite $facetConfiguration The updated FacetConfiguration resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function patchFacetConfigurationItemRequest($id, $facetConfiguration = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling patchFacetConfigurationItem'
            );
        }

        $resourcePath = '/facet_configurations/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($facetConfiguration)) {
            $_tempBody = $facetConfiguration;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/html'],
                ['application/merge-patch+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putFacetConfigurationItem
     *
     * Replaces the FacetConfiguration resource.
     *
     * @param  string $id id (required)
     * @param  \Gally\Rest\Model\FacetConfigurationFacetConfigurationWrite $facetConfiguration The updated FacetConfiguration resource (optional)
     *
     * @throws \Gally\Rest\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Gally\Rest\Model\FacetConfigurationFacetConfigurationRead
     */
    public function putFacetConfigurationItem($id, $facetConfiguration = null)
    {
        list($response) = $this->putFacetConfigurationItemWithHttpInfo($id, $facetConfiguration);
        return $response;
    }

    /**
     * Operation putFacetConfigurationItemWithHttpInfo
     *
     * Replaces the FacetConfiguration resource.
     *
     * @param  string $id (required)
     * @param  \Gally\Rest\Model\FacetConfigurationFacetConfigurationWrite $facetConfiguration The updated FacetConfiguration resource (optional)
     *
     * @throws \Gally\Rest\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Gally\Rest\Model\FacetConfigurationFacetConfigurationRead, HTTP status code, HTTP response headers (array of strings)
     */
    public function putFacetConfigurationItemWithHttpInfo($id, $facetConfiguration = null)
    {
        $returnType = '\Gally\Rest\Model\FacetConfigurationFacetConfigurationRead';
        $request = $this->putFacetConfigurationItemRequest($id, $facetConfiguration);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Gally\Rest\Model\FacetConfigurationFacetConfigurationRead',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putFacetConfigurationItemAsync
     *
     * Replaces the FacetConfiguration resource.
     *
     * @param  string $id (required)
     * @param  \Gally\Rest\Model\FacetConfigurationFacetConfigurationWrite $facetConfiguration The updated FacetConfiguration resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putFacetConfigurationItemAsync($id, $facetConfiguration = null)
    {
        return $this->putFacetConfigurationItemAsyncWithHttpInfo($id, $facetConfiguration)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putFacetConfigurationItemAsyncWithHttpInfo
     *
     * Replaces the FacetConfiguration resource.
     *
     * @param  string $id (required)
     * @param  \Gally\Rest\Model\FacetConfigurationFacetConfigurationWrite $facetConfiguration The updated FacetConfiguration resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putFacetConfigurationItemAsyncWithHttpInfo($id, $facetConfiguration = null)
    {
        $returnType = '\Gally\Rest\Model\FacetConfigurationFacetConfigurationRead';
        $request = $this->putFacetConfigurationItemRequest($id, $facetConfiguration);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putFacetConfigurationItem'
     *
     * @param  string $id (required)
     * @param  \Gally\Rest\Model\FacetConfigurationFacetConfigurationWrite $facetConfiguration The updated FacetConfiguration resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putFacetConfigurationItemRequest($id, $facetConfiguration = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling putFacetConfigurationItem'
            );
        }

        $resourcePath = '/facet_configurations/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($facetConfiguration)) {
            $_tempBody = $facetConfiguration;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/html'],
                ['application/ld+json', 'application/json', 'text/html']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
