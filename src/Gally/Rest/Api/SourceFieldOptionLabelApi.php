<?php
/**
 * SourceFieldOptionLabelApi
 * PHP version 5
 *
 * @category Class
 * @package  Gally\Rest
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Gally API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.29-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Gally\Rest\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Gally\Rest\ApiException;
use Gally\Rest\Configuration;
use Gally\Rest\HeaderSelector;
use Gally\Rest\ObjectSerializer;

/**
 * SourceFieldOptionLabelApi Class Doc Comment
 *
 * @category Class
 * @package  Gally\Rest
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SourceFieldOptionLabelApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation deleteSourceFieldOptionLabelItem
     *
     * Removes the SourceFieldOptionLabel resource.
     *
     * @param  string $id id (required)
     *
     * @throws \Gally\Rest\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteSourceFieldOptionLabelItem($id)
    {
        $this->deleteSourceFieldOptionLabelItemWithHttpInfo($id);
    }

    /**
     * Operation deleteSourceFieldOptionLabelItemWithHttpInfo
     *
     * Removes the SourceFieldOptionLabel resource.
     *
     * @param  string $id (required)
     *
     * @throws \Gally\Rest\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteSourceFieldOptionLabelItemWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->deleteSourceFieldOptionLabelItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteSourceFieldOptionLabelItemAsync
     *
     * Removes the SourceFieldOptionLabel resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteSourceFieldOptionLabelItemAsync($id)
    {
        return $this->deleteSourceFieldOptionLabelItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteSourceFieldOptionLabelItemAsyncWithHttpInfo
     *
     * Removes the SourceFieldOptionLabel resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteSourceFieldOptionLabelItemAsyncWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->deleteSourceFieldOptionLabelItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteSourceFieldOptionLabelItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteSourceFieldOptionLabelItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteSourceFieldOptionLabelItem'
            );
        }

        $resourcePath = '/source_field_option_labels/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSourceFieldOptionLabelCollection
     *
     * Retrieves the collection of SourceFieldOptionLabel resources.
     *
     * @param  string $localizedCatalog localizedCatalog (optional)
     * @param  string[] $localizedCatalog2 localizedCatalog2 (optional)
     * @param  string $sourceFieldOptionSourceField sourceFieldOptionSourceField (optional)
     * @param  string[] $sourceFieldOptionSourceField2 sourceFieldOptionSourceField2 (optional)
     * @param  string $orderSourceFieldOptionPosition orderSourceFieldOptionPosition (optional)
     * @param  int $currentPage The collection page number (optional)
     * @param  int $pageSize The number of items per page (optional)
     * @param  bool $pagination Enable or disable pagination (optional)
     *
     * @throws \Gally\Rest\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Gally\Rest\Model\SourceFieldOptionLabelSourceFieldOptionLabelRead[]
     */
    public function getSourceFieldOptionLabelCollection($localizedCatalog = null, $localizedCatalog2 = null, $sourceFieldOptionSourceField = null, $sourceFieldOptionSourceField2 = null, $orderSourceFieldOptionPosition = null, $currentPage = null, $pageSize = null, $pagination = null)
    {
        list($response) = $this->getSourceFieldOptionLabelCollectionWithHttpInfo($localizedCatalog, $localizedCatalog2, $sourceFieldOptionSourceField, $sourceFieldOptionSourceField2, $orderSourceFieldOptionPosition, $currentPage, $pageSize, $pagination);
        return $response;
    }

    /**
     * Operation getSourceFieldOptionLabelCollectionWithHttpInfo
     *
     * Retrieves the collection of SourceFieldOptionLabel resources.
     *
     * @param  string $localizedCatalog (optional)
     * @param  string[] $localizedCatalog2 (optional)
     * @param  string $sourceFieldOptionSourceField (optional)
     * @param  string[] $sourceFieldOptionSourceField2 (optional)
     * @param  string $orderSourceFieldOptionPosition (optional)
     * @param  int $currentPage The collection page number (optional)
     * @param  int $pageSize The number of items per page (optional)
     * @param  bool $pagination Enable or disable pagination (optional)
     *
     * @throws \Gally\Rest\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Gally\Rest\Model\SourceFieldOptionLabelSourceFieldOptionLabelRead[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getSourceFieldOptionLabelCollectionWithHttpInfo($localizedCatalog = null, $localizedCatalog2 = null, $sourceFieldOptionSourceField = null, $sourceFieldOptionSourceField2 = null, $orderSourceFieldOptionPosition = null, $currentPage = null, $pageSize = null, $pagination = null)
    {
        $returnType = '\Gally\Rest\Model\SourceFieldOptionLabelSourceFieldOptionLabelRead[]';
        $request = $this->getSourceFieldOptionLabelCollectionRequest($localizedCatalog, $localizedCatalog2, $sourceFieldOptionSourceField, $sourceFieldOptionSourceField2, $orderSourceFieldOptionPosition, $currentPage, $pageSize, $pagination);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Gally\Rest\Model\SourceFieldOptionLabelSourceFieldOptionLabelRead[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSourceFieldOptionLabelCollectionAsync
     *
     * Retrieves the collection of SourceFieldOptionLabel resources.
     *
     * @param  string $localizedCatalog (optional)
     * @param  string[] $localizedCatalog2 (optional)
     * @param  string $sourceFieldOptionSourceField (optional)
     * @param  string[] $sourceFieldOptionSourceField2 (optional)
     * @param  string $orderSourceFieldOptionPosition (optional)
     * @param  int $currentPage The collection page number (optional)
     * @param  int $pageSize The number of items per page (optional)
     * @param  bool $pagination Enable or disable pagination (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSourceFieldOptionLabelCollectionAsync($localizedCatalog = null, $localizedCatalog2 = null, $sourceFieldOptionSourceField = null, $sourceFieldOptionSourceField2 = null, $orderSourceFieldOptionPosition = null, $currentPage = null, $pageSize = null, $pagination = null)
    {
        return $this->getSourceFieldOptionLabelCollectionAsyncWithHttpInfo($localizedCatalog, $localizedCatalog2, $sourceFieldOptionSourceField, $sourceFieldOptionSourceField2, $orderSourceFieldOptionPosition, $currentPage, $pageSize, $pagination)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSourceFieldOptionLabelCollectionAsyncWithHttpInfo
     *
     * Retrieves the collection of SourceFieldOptionLabel resources.
     *
     * @param  string $localizedCatalog (optional)
     * @param  string[] $localizedCatalog2 (optional)
     * @param  string $sourceFieldOptionSourceField (optional)
     * @param  string[] $sourceFieldOptionSourceField2 (optional)
     * @param  string $orderSourceFieldOptionPosition (optional)
     * @param  int $currentPage The collection page number (optional)
     * @param  int $pageSize The number of items per page (optional)
     * @param  bool $pagination Enable or disable pagination (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSourceFieldOptionLabelCollectionAsyncWithHttpInfo($localizedCatalog = null, $localizedCatalog2 = null, $sourceFieldOptionSourceField = null, $sourceFieldOptionSourceField2 = null, $orderSourceFieldOptionPosition = null, $currentPage = null, $pageSize = null, $pagination = null)
    {
        $returnType = '\Gally\Rest\Model\SourceFieldOptionLabelSourceFieldOptionLabelRead[]';
        $request = $this->getSourceFieldOptionLabelCollectionRequest($localizedCatalog, $localizedCatalog2, $sourceFieldOptionSourceField, $sourceFieldOptionSourceField2, $orderSourceFieldOptionPosition, $currentPage, $pageSize, $pagination);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSourceFieldOptionLabelCollection'
     *
     * @param  string $localizedCatalog (optional)
     * @param  string[] $localizedCatalog2 (optional)
     * @param  string $sourceFieldOptionSourceField (optional)
     * @param  string[] $sourceFieldOptionSourceField2 (optional)
     * @param  string $orderSourceFieldOptionPosition (optional)
     * @param  int $currentPage The collection page number (optional)
     * @param  int $pageSize The number of items per page (optional)
     * @param  bool $pagination Enable or disable pagination (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getSourceFieldOptionLabelCollectionRequest($localizedCatalog = null, $localizedCatalog2 = null, $sourceFieldOptionSourceField = null, $sourceFieldOptionSourceField2 = null, $orderSourceFieldOptionPosition = null, $currentPage = null, $pageSize = null, $pagination = null)
    {

        $resourcePath = '/source_field_option_labels';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($localizedCatalog !== null) {
            $queryParams['localizedCatalog'] = ObjectSerializer::toQueryValue($localizedCatalog);
        }
        // query params
        if (is_array($localizedCatalog2)) {
            $queryParams['localizedCatalog[]'] = $localizedCatalog2;
        } else
        if ($localizedCatalog2 !== null) {
            $queryParams['localizedCatalog[]'] = ObjectSerializer::toQueryValue($localizedCatalog2);
        }
        // query params
        if ($sourceFieldOptionSourceField !== null) {
            $queryParams['sourceFieldOption.sourceField'] = ObjectSerializer::toQueryValue($sourceFieldOptionSourceField);
        }
        // query params
        if (is_array($sourceFieldOptionSourceField2)) {
            $queryParams['sourceFieldOption.sourceField[]'] = $sourceFieldOptionSourceField2;
        } else
        if ($sourceFieldOptionSourceField2 !== null) {
            $queryParams['sourceFieldOption.sourceField[]'] = ObjectSerializer::toQueryValue($sourceFieldOptionSourceField2);
        }
        // query params
        if ($orderSourceFieldOptionPosition !== null) {
            $queryParams['order[sourceFieldOption.position]'] = ObjectSerializer::toQueryValue($orderSourceFieldOptionPosition);
        }
        // query params
        if ($currentPage !== null) {
            $queryParams['currentPage'] = ObjectSerializer::toQueryValue($currentPage);
        }
        // query params
        if ($pageSize !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($pageSize);
        }
        // query params
        if ($pagination !== null) {
            $queryParams['pagination'] = ObjectSerializer::toQueryValue($pagination);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSourceFieldOptionLabelItem
     *
     * Retrieves a SourceFieldOptionLabel resource.
     *
     * @param  string $id id (required)
     *
     * @throws \Gally\Rest\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Gally\Rest\Model\SourceFieldOptionLabelSourceFieldOptionLabelRead
     */
    public function getSourceFieldOptionLabelItem($id)
    {
        list($response) = $this->getSourceFieldOptionLabelItemWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getSourceFieldOptionLabelItemWithHttpInfo
     *
     * Retrieves a SourceFieldOptionLabel resource.
     *
     * @param  string $id (required)
     *
     * @throws \Gally\Rest\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Gally\Rest\Model\SourceFieldOptionLabelSourceFieldOptionLabelRead, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSourceFieldOptionLabelItemWithHttpInfo($id)
    {
        $returnType = '\Gally\Rest\Model\SourceFieldOptionLabelSourceFieldOptionLabelRead';
        $request = $this->getSourceFieldOptionLabelItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Gally\Rest\Model\SourceFieldOptionLabelSourceFieldOptionLabelRead',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSourceFieldOptionLabelItemAsync
     *
     * Retrieves a SourceFieldOptionLabel resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSourceFieldOptionLabelItemAsync($id)
    {
        return $this->getSourceFieldOptionLabelItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSourceFieldOptionLabelItemAsyncWithHttpInfo
     *
     * Retrieves a SourceFieldOptionLabel resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSourceFieldOptionLabelItemAsyncWithHttpInfo($id)
    {
        $returnType = '\Gally\Rest\Model\SourceFieldOptionLabelSourceFieldOptionLabelRead';
        $request = $this->getSourceFieldOptionLabelItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSourceFieldOptionLabelItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getSourceFieldOptionLabelItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getSourceFieldOptionLabelItem'
            );
        }

        $resourcePath = '/source_field_option_labels/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation patchSourceFieldOptionLabelItem
     *
     * Updates the SourceFieldOptionLabel resource.
     *
     * @param  string $id id (required)
     * @param  \Gally\Rest\Model\SourceFieldOptionLabelSourceFieldOptionLabelWrite $sourceFieldOptionLabel The updated SourceFieldOptionLabel resource (optional)
     *
     * @throws \Gally\Rest\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Gally\Rest\Model\SourceFieldOptionLabelSourceFieldOptionLabelRead
     */
    public function patchSourceFieldOptionLabelItem($id, $sourceFieldOptionLabel = null)
    {
        list($response) = $this->patchSourceFieldOptionLabelItemWithHttpInfo($id, $sourceFieldOptionLabel);
        return $response;
    }

    /**
     * Operation patchSourceFieldOptionLabelItemWithHttpInfo
     *
     * Updates the SourceFieldOptionLabel resource.
     *
     * @param  string $id (required)
     * @param  \Gally\Rest\Model\SourceFieldOptionLabelSourceFieldOptionLabelWrite $sourceFieldOptionLabel The updated SourceFieldOptionLabel resource (optional)
     *
     * @throws \Gally\Rest\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Gally\Rest\Model\SourceFieldOptionLabelSourceFieldOptionLabelRead, HTTP status code, HTTP response headers (array of strings)
     */
    public function patchSourceFieldOptionLabelItemWithHttpInfo($id, $sourceFieldOptionLabel = null)
    {
        $returnType = '\Gally\Rest\Model\SourceFieldOptionLabelSourceFieldOptionLabelRead';
        $request = $this->patchSourceFieldOptionLabelItemRequest($id, $sourceFieldOptionLabel);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Gally\Rest\Model\SourceFieldOptionLabelSourceFieldOptionLabelRead',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation patchSourceFieldOptionLabelItemAsync
     *
     * Updates the SourceFieldOptionLabel resource.
     *
     * @param  string $id (required)
     * @param  \Gally\Rest\Model\SourceFieldOptionLabelSourceFieldOptionLabelWrite $sourceFieldOptionLabel The updated SourceFieldOptionLabel resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchSourceFieldOptionLabelItemAsync($id, $sourceFieldOptionLabel = null)
    {
        return $this->patchSourceFieldOptionLabelItemAsyncWithHttpInfo($id, $sourceFieldOptionLabel)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation patchSourceFieldOptionLabelItemAsyncWithHttpInfo
     *
     * Updates the SourceFieldOptionLabel resource.
     *
     * @param  string $id (required)
     * @param  \Gally\Rest\Model\SourceFieldOptionLabelSourceFieldOptionLabelWrite $sourceFieldOptionLabel The updated SourceFieldOptionLabel resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchSourceFieldOptionLabelItemAsyncWithHttpInfo($id, $sourceFieldOptionLabel = null)
    {
        $returnType = '\Gally\Rest\Model\SourceFieldOptionLabelSourceFieldOptionLabelRead';
        $request = $this->patchSourceFieldOptionLabelItemRequest($id, $sourceFieldOptionLabel);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'patchSourceFieldOptionLabelItem'
     *
     * @param  string $id (required)
     * @param  \Gally\Rest\Model\SourceFieldOptionLabelSourceFieldOptionLabelWrite $sourceFieldOptionLabel The updated SourceFieldOptionLabel resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function patchSourceFieldOptionLabelItemRequest($id, $sourceFieldOptionLabel = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling patchSourceFieldOptionLabelItem'
            );
        }

        $resourcePath = '/source_field_option_labels/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($sourceFieldOptionLabel)) {
            $_tempBody = $sourceFieldOptionLabel;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/html'],
                ['application/merge-patch+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postSourceFieldOptionLabelCollection
     *
     * Creates a SourceFieldOptionLabel resource.
     *
     * @param  \Gally\Rest\Model\SourceFieldOptionLabelSourceFieldOptionLabelWrite $sourceFieldOptionLabel The new SourceFieldOptionLabel resource (optional)
     *
     * @throws \Gally\Rest\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Gally\Rest\Model\SourceFieldOptionLabelSourceFieldOptionLabelRead
     */
    public function postSourceFieldOptionLabelCollection($sourceFieldOptionLabel = null)
    {
        list($response) = $this->postSourceFieldOptionLabelCollectionWithHttpInfo($sourceFieldOptionLabel);
        return $response;
    }

    /**
     * Operation postSourceFieldOptionLabelCollectionWithHttpInfo
     *
     * Creates a SourceFieldOptionLabel resource.
     *
     * @param  \Gally\Rest\Model\SourceFieldOptionLabelSourceFieldOptionLabelWrite $sourceFieldOptionLabel The new SourceFieldOptionLabel resource (optional)
     *
     * @throws \Gally\Rest\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Gally\Rest\Model\SourceFieldOptionLabelSourceFieldOptionLabelRead, HTTP status code, HTTP response headers (array of strings)
     */
    public function postSourceFieldOptionLabelCollectionWithHttpInfo($sourceFieldOptionLabel = null)
    {
        $returnType = '\Gally\Rest\Model\SourceFieldOptionLabelSourceFieldOptionLabelRead';
        $request = $this->postSourceFieldOptionLabelCollectionRequest($sourceFieldOptionLabel);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Gally\Rest\Model\SourceFieldOptionLabelSourceFieldOptionLabelRead',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postSourceFieldOptionLabelCollectionAsync
     *
     * Creates a SourceFieldOptionLabel resource.
     *
     * @param  \Gally\Rest\Model\SourceFieldOptionLabelSourceFieldOptionLabelWrite $sourceFieldOptionLabel The new SourceFieldOptionLabel resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postSourceFieldOptionLabelCollectionAsync($sourceFieldOptionLabel = null)
    {
        return $this->postSourceFieldOptionLabelCollectionAsyncWithHttpInfo($sourceFieldOptionLabel)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postSourceFieldOptionLabelCollectionAsyncWithHttpInfo
     *
     * Creates a SourceFieldOptionLabel resource.
     *
     * @param  \Gally\Rest\Model\SourceFieldOptionLabelSourceFieldOptionLabelWrite $sourceFieldOptionLabel The new SourceFieldOptionLabel resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postSourceFieldOptionLabelCollectionAsyncWithHttpInfo($sourceFieldOptionLabel = null)
    {
        $returnType = '\Gally\Rest\Model\SourceFieldOptionLabelSourceFieldOptionLabelRead';
        $request = $this->postSourceFieldOptionLabelCollectionRequest($sourceFieldOptionLabel);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postSourceFieldOptionLabelCollection'
     *
     * @param  \Gally\Rest\Model\SourceFieldOptionLabelSourceFieldOptionLabelWrite $sourceFieldOptionLabel The new SourceFieldOptionLabel resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postSourceFieldOptionLabelCollectionRequest($sourceFieldOptionLabel = null)
    {

        $resourcePath = '/source_field_option_labels';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sourceFieldOptionLabel)) {
            $_tempBody = $sourceFieldOptionLabel;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/html'],
                ['application/ld+json', 'application/json', 'text/html']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putSourceFieldOptionLabelItem
     *
     * Replaces the SourceFieldOptionLabel resource.
     *
     * @param  string $id id (required)
     * @param  \Gally\Rest\Model\SourceFieldOptionLabelSourceFieldOptionLabelWrite $sourceFieldOptionLabel The updated SourceFieldOptionLabel resource (optional)
     *
     * @throws \Gally\Rest\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Gally\Rest\Model\SourceFieldOptionLabelSourceFieldOptionLabelRead
     */
    public function putSourceFieldOptionLabelItem($id, $sourceFieldOptionLabel = null)
    {
        list($response) = $this->putSourceFieldOptionLabelItemWithHttpInfo($id, $sourceFieldOptionLabel);
        return $response;
    }

    /**
     * Operation putSourceFieldOptionLabelItemWithHttpInfo
     *
     * Replaces the SourceFieldOptionLabel resource.
     *
     * @param  string $id (required)
     * @param  \Gally\Rest\Model\SourceFieldOptionLabelSourceFieldOptionLabelWrite $sourceFieldOptionLabel The updated SourceFieldOptionLabel resource (optional)
     *
     * @throws \Gally\Rest\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Gally\Rest\Model\SourceFieldOptionLabelSourceFieldOptionLabelRead, HTTP status code, HTTP response headers (array of strings)
     */
    public function putSourceFieldOptionLabelItemWithHttpInfo($id, $sourceFieldOptionLabel = null)
    {
        $returnType = '\Gally\Rest\Model\SourceFieldOptionLabelSourceFieldOptionLabelRead';
        $request = $this->putSourceFieldOptionLabelItemRequest($id, $sourceFieldOptionLabel);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Gally\Rest\Model\SourceFieldOptionLabelSourceFieldOptionLabelRead',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putSourceFieldOptionLabelItemAsync
     *
     * Replaces the SourceFieldOptionLabel resource.
     *
     * @param  string $id (required)
     * @param  \Gally\Rest\Model\SourceFieldOptionLabelSourceFieldOptionLabelWrite $sourceFieldOptionLabel The updated SourceFieldOptionLabel resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putSourceFieldOptionLabelItemAsync($id, $sourceFieldOptionLabel = null)
    {
        return $this->putSourceFieldOptionLabelItemAsyncWithHttpInfo($id, $sourceFieldOptionLabel)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putSourceFieldOptionLabelItemAsyncWithHttpInfo
     *
     * Replaces the SourceFieldOptionLabel resource.
     *
     * @param  string $id (required)
     * @param  \Gally\Rest\Model\SourceFieldOptionLabelSourceFieldOptionLabelWrite $sourceFieldOptionLabel The updated SourceFieldOptionLabel resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putSourceFieldOptionLabelItemAsyncWithHttpInfo($id, $sourceFieldOptionLabel = null)
    {
        $returnType = '\Gally\Rest\Model\SourceFieldOptionLabelSourceFieldOptionLabelRead';
        $request = $this->putSourceFieldOptionLabelItemRequest($id, $sourceFieldOptionLabel);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putSourceFieldOptionLabelItem'
     *
     * @param  string $id (required)
     * @param  \Gally\Rest\Model\SourceFieldOptionLabelSourceFieldOptionLabelWrite $sourceFieldOptionLabel The updated SourceFieldOptionLabel resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putSourceFieldOptionLabelItemRequest($id, $sourceFieldOptionLabel = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling putSourceFieldOptionLabelItem'
            );
        }

        $resourcePath = '/source_field_option_labels/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($sourceFieldOptionLabel)) {
            $_tempBody = $sourceFieldOptionLabel;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/html'],
                ['application/ld+json', 'application/json', 'text/html']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
